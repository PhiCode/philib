<?xml version="1.0" encoding="utf-8" ?>
<!--
	Copyright (c) 2006-2009 Philipp Meinen <philipp@bind.ch>

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"),
	to deal in the Software without restriction, including without limitation
	the rights to use, copy, modify, merge, publish, distribute, sublicense,
	and/or sell copies of the Software, and to permit persons to whom the Software
	is furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included
	in all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
	EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
	TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH
	THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-->

<project name="philib" default="all">
	<description>
            A class library for commonly used stuff. 
    </description>

	<!-- ### Properties ### -->

	<!-- load configurable properties -->
	<property file="build.properties" />

	<!-- "internal" properties -->
	<property name="src.dir" value="src" />
	<property name="test.dir" value="test" />
	<property name="lib.dir" value="lib" />
	<property name="build.dir" value="build" />
	<property name="build.test.dir" value="build/test" />
	<property name="javadoc.dir" value="${build.dir}/doc" />
	<property name="junit.test.dir" value="${build.test.dir}/test" />
	<property name="junit.html.dir" value="${build.test.dir}/report_html" />

	<!-- ### Path definitions ### -->

	<path id="classpath.src.compile">
		<fileset dir="${lib.dir}">
			<include name="*.jar" />
		</fileset>
	</path>

	<path id="classpath.test.compile">
		<fileset dir="${lib.dir}">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${lib.dir}/test">
			<include name="*.jar" />
		</fileset>
		<pathelement path="${build.dir}/classes" />
	</path>

	<path id="classpath.test.run">
		<fileset dir="${lib.dir}">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${lib.dir}/test">
			<include name="*.jar" />
		</fileset>
		<pathelement path="${build.dir}/classes" />
		<pathelement path="${build.test.dir}/classes" />
	</path>

	<!-- ### Taskdefs ### -->
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement path="lib/ant/ant-contrib-1.0b3.jar" />
		</classpath>
	</taskdef>

	<!-- ### Macros ### -->

	<macrodef name="compile">
		<attribute name="src" />
		<attribute name="dst" />
		<attribute name="classpathRefId" />
		<sequential>
			<mkdir dir="@{dst}" />

			<javac srcdir="@{src}" destdir="@{dst}" source="${javac.source}" target="${javac.target}" encoding="utf-8" nowarn="false" failonerror="true" optimize="${javac.optimize}" debug="${javac.debug}" deprecation="${javac.deprecation}">
				<classpath refid="@{classpathRefId}" />
			</javac>

			<!-- copy resources -->
			<copy todir="@{dst}" flatten="false" includeemptydirs="false">
				<fileset dir="@{src}">
					<exclude name="**/*.java" />
				</fileset>
			</copy>
		</sequential>
	</macrodef>

	<macrodef name="ifNotEmpty">
		<attribute name="value" />
		<element name="useElement" optional="false" />
		<sequential>
			<if>
				<equals arg1="@{value}" arg2="" />
				<else>
					<useElement />
				</else>
			</if>
		</sequential>
	</macrodef>

	<!-- ### Targets ### -->

	<target name="all" description="build all" depends="clean,build,test,package" />

	<target name="clean" description="clean up">
		<delete dir="${build.dir}" />
		<delete file="${jar.name}" />
	</target>

	<target name="build" description="build the library source-code">
		<compile src="${src.dir}" dst="${build.dir}/classes" classpathrefid="classpath.src.compile" />
	</target>

	<target name="buildtests" depends="build" description="build the library test-classes">
		<compile src="${test.dir}" dst="${build.test.dir}/classes" classpathrefid="classpath.test.compile" />
	</target>

	<target name="package" depends="build" description="build a distributable package">
		<mkdir dir="${build.dir}/classes/META-INF" />
		<property name="manifest.generated" value="${build.dir}/classes/META-INF/MANIFEST.MF" />

		<!-- manifest-version 1.2 is required for url-Class-Path entries -->
		<manifest file="${manifest.generated}" mode="update">
			<attribute name="Manifest-Version" value="1.2" />
		</manifest>

		<!-- maybe add a main-class attribute to the manifest-->
		<ifNotEmpty value="${manifest.mainclass}">
			<useElement>
				<echo>Using MANIFEST Main-Class: ${manifest.mainclass}</echo>
				<manifest file="${manifest.generated}" mode="update">
					<attribute name="Main-Class" value="${manifest.mainclass}" />
				</manifest>
			</useElement>
		</ifNotEmpty>

		<!-- maybe add a class-path attribute to the manifest-->
		<manifestclasspath property="manifest.classpath" jarfile="${jar.name}">
			<classpath refid="classpath.src.compile" />
		</manifestclasspath>
		<ifNotEmpty value="${manifest.classpath}">
			<useElement>
				<echo>Using MANIFEST Class-Path: ${manifest.classpath}</echo>
				<manifest file="${manifest.generated}" mode="update">
					<attribute name="Class-Path" value="${manifest.classpath}" />
				</manifest>
			</useElement>
		</ifNotEmpty>

		<!-- generate the jar with the generated manifest -->
		<!-- XXX: if we enable "index" generation we must also implement the <indexjars> element,
		otherwise the Class-Path entry of the manifest is overruled -->
		<jar destfile="${jar.name}" basedir="${build.dir}/classes" compress="${jar.compress}" index="false" update="false" manifest="${manifest.generated}" />
	</target>

	<target name="test" depends="buildtests" description="build and run the junit tests">
		<mkdir dir="${junit.test.dir}" />
		<mkdir dir="${junit.html.dir}" />

		<!-- run the junit test and put the xml-reports in a separate folder -->
		<junit printsummary="yes" haltonfailure="yes" fork="true" dir="${junit.test.dir}">
			<classpath refid="classpath.test.run" />

			<batchtest fork="true" todir="${junit.test.dir}" filtertrace="false">
				<fileset dir="${build.test.dir}/classes">
					<exclude name="**/*$*.class" />
					<exclude name="**/Abstract*.class" />
					<include name="**/*Test.class" />
				</fileset>
				<formatter type="xml" />
			</batchtest>
		</junit>

		<!-- collect the xml-reports and generate the html-report in yet another folder -->
		<junitreport todir="${junit.test.dir}">
			<fileset dir="${junit.test.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${junit.html.dir}" />
		</junitreport>

		<echo>You will find the JUnit-testreport in the directory:
			${junit.html.dir}</echo>
	</target>

	<target name="doc" description="build the public api">
		<mkdir dir="${javadoc.dir}" />
		<javadoc access="protected" author="true" classpath="" destdir="${javadoc.dir}" nodeprecated="false" nodeprecatedlist="false" noindex="false" nonavbar="false" notree="false" source="1.5" sourcepath="${src.dir}" packagenames="${javadoc.packagenames}" splitindex="true" use="true" version="true" serialwarn="true" verbose="true">
			<classpath refid="classpath.src.compile" />
			<link href="${javadoc.apiurl}" />
		</javadoc>
	</target>

</project>
